[{"path":"https://dankelley.github.io/oceglider/articles/sea_explorer.html","id":"create-temporary-directory-for-cran-submission","dir":"Articles","previous_headings":"","what":"Create Temporary Directory for CRAN Submission","title":"Handling SeaExplorer Glider Data","text":"vignette suitable CRAN submission, must download files user’s working space. avoid setting aside space next two lines code. space removed end vignette. Obviously practical work make sense store things permanent directory, avoid need new downloads every time work done data.","code":"tmpdir <- tempdir() # to hold raw files fileNC <- tempfile(fileext = \".nc\") # to hold a binary (NetCDF) file"},{"path":[]},{"path":"https://dankelley.github.io/oceglider/articles/sea_explorer.html","id":"raw-files","dir":"Articles","previous_headings":"Analysis","what":"Raw Files","title":"Handling SeaExplorer Glider Data","text":"shows download small number files (just 5) CPROOF server Reference 1. code worked 2024-08-29, reader finds server changed, solution alter value urlbase line 2 . Note based assumption server holds sub pld1 files directory. server holds separate directories, simple matter alter lines defining subs raws . following produces plot summarizes key hydrographic properties, format quite useful initial look data. Figure 1. overview raw data. Note spurious values time-series plots first hour two. Inspection reveals spurious (non-oceanographic) signals first hour two, low pressures, high temperatures low salinities. Reasoning spurious data resulted instrument set record hours deployment, analyst might choose discard data. can done subset() function, e.g. follows, 2.5 hours chosen cutoff experimentation. Figure 2. Raw data, trimming spurious data 1.5 hours following power-events. spurious data now gone, new g2 version certainly looks like oceanographic data collected glider. Note pressure increases glider descends decreases ascends. Temperature decreases depth, salinity increases. SeaExplorer gliders store record navState, stored numerical code, follows. 105 means glider navigating yet; 115 means glider surfacing preparation communication; 116 means glider surface, acquiring GPS signal, communicating; 110 means glider inflecting downward; 100 means glider ballast set descending; 118 means glider ballast adjusted reduce density, inflecting upward; 117 means glider ballast set ascending. way see transition one state another, follows.  Another useful operation look individual yos, can done follows, first three remaining yos.  Note plots show downcast upcast portions yo. Waterfall plots also useful, easily constructed, lower-level oce code.","code":"n <- 6 # number of files to download urlRaw <- paste0(     \"https://cproof.uvic.ca/gliderdata/deployments/\",     \"dfo-eva035/dfo-eva035-20190718/\",     \"delayed_raw/\" ) subsRemote <- paste0(\"sea035.12.gli.sub.\", 1:n) rawsRemote <- paste0(\"sea035.12.pld1.raw.\", 1:n) subs <- file.path(tmpdir, subsRemote) raws <- file.path(tmpdir, rawsRemote) for (i in 1:n) {     if (!file.exists(subs[i])) {         # download.file(paste0(urlRaw, subsRemote[i]), subs[i])         curl::curl_download(             url = paste0(urlRaw, subsRemote[i]),             destfile = subs[i], mode = \"wb\"         )     }     if (!file.exists(raws[i])) {         # download.file(paste0(urlRaw, rawsRemote[i]), raws[i])         curl::curl_download(             url = paste0(urlRaw, rawsRemote[i]),             destfile = raws[i], mode = \"wb\"         )     } } library(oce) #> Loading required package: gsw library(oceglider) #> Loading required package: ncdf4 g <- read.glider.seaexplorer.raw(tmpdir) layout(matrix(c(2, 1, 3, 1, 4, 1), byrow = TRUE, nrow = 3), widths = c(0.6, 0.4)) plot(g, which = \"TS\") plot(g, which = \"p\", type = \"p\", cex = 0.3) plot(g, which = \"T\", type = \"p\", cex = 0.3) plot(g, which = \"S\", type = \"p\", cex = 0.3) keep <- g[[\"time\"]] > g[[\"time\"]][1] + 2.5 * 3600 g2 <- subset(g, keep) layout(matrix(c(2, 1, 3, 1, 4, 1), byrow = TRUE, nrow = 3), widths = c(0.6, 0.4)) plot(g2, which = \"TS\") plot(g2, which = \"p\", type = \"p\", cex = 0.3) plot(g2, which = \"T\", type = \"p\", cex = 0.3) plot(g2, which = \"S\", type = \"p\", cex = 0.3) par(mfrow = c(1, 1)) plot(g2, which = \"navState\") data <- g2[[\"data\"]] s <- split(data, data$yoNumber) par(mfrow = c(1, 3)) for (i in 1:3) {     ss <- s[[i]]     ctd <- oce::as.ctd(         salinity = ss$salinity,         temperature = ss$temperature,         pressure = ss$pressure,         longitude = ss$longitude,         latitude = ss$latitude     )     oce::plotProfile(ctd, xtype = \"salinity+temperature\", eos = \"unesco\")     mtext(sprintf(\"yo %d\", ss$yoNumber[1]), line = -1, cex = par(\"cex\")) } par(mfrow = c(1, 1)) # use limits based on all yos, to avoid clipping Tlim <- range(sapply(s, \\(ss) range(ss[[\"temperature\"]], na.rm = TRUE))) plim <- rev(range(sapply(s, \\(ss) range(ss[[\"pressure\"]], na.rm = TRUE)))) for (i in seq_along(s)) {     ss <- s[[i]]     ctd <- oce::as.ctd(         salinity = ss$salinity,         temperature = ss$temperature,         pressure = ss$pressure,         longitude = ss$longitude,         latitude = ss$latitude     )     ctd <- oce::ctdTrim(ctd, \"upcast\")     if (i == 1) {         oce::plotProfile(ctd,             xtype = \"temperature\", eos = \"unesco\",             Tlim = Tlim, plim = plim         )     } else {         lines(ctd[[\"temperature\"]], ctd[[\"pressure\"]], col = i)     } } legend(\"bottomright\",     title = \"Start Time\",     lwd = 1, col = seq_along(s), cex = 0.75, bg = \"white\",     legend = sapply(s, function(ss) format(ss$time[[1]], \"%H:%S\")) )"},{"path":"https://dankelley.github.io/oceglider/articles/sea_explorer.html","id":"binary-netcdf-files","dir":"Articles","previous_headings":"Analysis","what":"Binary (NetCDF) Files","title":"Handling SeaExplorer Glider Data","text":"NetCDF files likely format users dealing , partly can loaded quickly, simple read. sample file, Reference 2, corresponds full dataset used previous discussion raw data. Note following code creates temporary directory downloaded material saved. cleanup required submission CRAN machines normally part typical workflow. Indeed, common download files present locally, indicated call file.exist(). done raw data, drop data certain time. Typically, next step see trajectory time-depth space, follows.  shows glider surface nearly last day sampling, might expect spurious data . Salinity usually good indicator, check .  Let’s trim time remove final time period, rechecking plots salinity temperature.  stage, isolated time interval useful data. still obvious problems spurious salinities, perhaps temperatures, present initial look data, can overcome setting limits colour scale plots. (Obviously, detailed analyses demand careful consideration.)  representation rely gridding fill spots data, can subject problems overpainting colours later yos obscuring colours earlier rows. One way around use sample() function randomly order data points, , , generic plot() used need replaced lower-level plot calls. (Readers experience know ; others think problem , quite useful method.)","code":"urlNC <- paste0(     \"https://cproof.uvic.ca/gliderdata/deployments/\",     \"dfo-eva035/dfo-eva035-20190718/\",     \"/L0-timeseries/dfo-eva035-20190718_delayed.nc\" ) curl::curl_download(url = urlNC, destfile = fileNC, mode = \"wb\") G <- read.glider.netcdf(fileNC) keep <- G[[\"time\"]] > G[[\"time\"]][1] + 2.5 * 3600 G2 <- subset(G, keep) plot(G2, which = \"p\", type = \"p\", cex = 0.3) plot(G2, which = \"S\", type = \"p\", cex = 0.3) G3 <- subset(G2, time < as.POSIXct(\"2019-07-23 06:00:00\", tz = \"UTC\")) par(mfrow = c(2, 1)) plot(G3, which = \"S\", type = \"p\", cex = 0.3) plot(G3, which = \"T\", type = \"p\", cex = 0.3) temperature <- G3[[\"temperature\"]] cmT <- oce::colormap(temperature,     zlim = quantile(temperature, c(0.01, 0.99), na.rm = TRUE),     col = oceColorsTurbo ) salinity <- G3[[\"salinity\"]] cmS <- oce::colormap(salinity,     zlim = quantile(salinity, c(0.01, 0.99), na.rm = TRUE),     col = oceColorsTurbo ) par(mfrow = c(2, 1)) par(mar = c(3, 3, 1, 1)) drawPalette(colormap = cmT) plot(G3,     which = \"p\", type = \"p\", col = cmT$zcol, mar = c(3, 3, 1, 4),     pch = 20, cex = 0.3 ) par(mar = c(3, 3, 1, 1)) drawPalette(colormap = cmS) plot(G3,     which = \"p\", type = \"p\", col = cmS$zcol, mar = c(3, 3, 1, 4),     pch = 20, cex = 0.3 )"},{"path":"https://dankelley.github.io/oceglider/articles/sea_explorer.html","id":"cleanup-of-temporary-files","dir":"Articles","previous_headings":"Analysis","what":"Cleanup of Temporary Files","title":"Handling SeaExplorer Glider Data","text":"noted outset, CRAN rules dictate downloaded material deleted. actual analysis, though, unlikely material deleted, don’t just copy line! Exercises. Set sample() scheme see overpainting problem. Also, try adjusting symbol size. Extract oxygen, colour-code plot . (Advanced) Explore gridding options, cast data onto uniform time-depth grid. deemed interest, try gridding also lateral coordinate instead time.","code":"unlink(fileNC) # where the binary (NetCDF) file went unlink(tmpdir, recursive = TRUE) # where the raw files went"},{"path":"https://dankelley.github.io/oceglider/articles/sea_explorer.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Handling SeaExplorer Glider Data","text":"“Index /Gliderdata/Deployments/Dfo-Eva035/Dfo-Eva035-20231019/Realtime_raw.” Accessed September 2, 2024. https://cproof.uvic.ca/gliderdata/deployments/dfo-eva035/dfo-eva035-20231019/realtime_raw/. “Time series Delayed [dfo-eva035/dfo-eva035-20231019_delayed.nc].” Accessed September 2, 2024. https://cproof.uvic.ca/gliderdata/deployments/dfo-eva035/dfo-eva035-20231019/L0-timeseries/dfo-eva035-20231019_delayed.nc","code":""},{"path":"https://dankelley.github.io/oceglider/articles/slocum_glider.html","id":"some-common-steps-with-slocum-datasets","dir":"Articles","previous_headings":"","what":"Some Common Steps with Slocum Datasets","title":"Handling Slocum Glider Data","text":"use dataset CPROOF (Reference 1). always makes sense get summary, see data contained object. Next, make map see sampling done.  map comports one Reference 2, except proper scaling axes, oceglider computes aspect ratio preserve shapes centre plot. Next, examine pressure-time trajectory.  Note large region whitespace right plot panel. dataset time values interval, pressure values NA. subset() function used trim dataset, necessarily wise valuable data (even just longitude latitude valuable, case hydrographic sensors provide nothing usable). can show temperature similar plot, switching lines points, colour-coding temperature.  Notice colour palette ranges red, although small region graph colour. quick glance graph reveal many points sufficient temperature indicated color. methods illustrated SeaExplorer vignette can employed , brevity just use percentile trimming get diagram least provides initial view data.  Readers might agree version looks better, displaying features first plot. Salinity often problem, ’ll thing, first plotting data.  , second, trimming.  , see improvement. stage, confidence data read properly plotting, extraction [[ basic features work. Readers directed SeaExplorer vignette ideas things might worth pursuing. noted outset, CRAN rules dictate downloaded material deleted. actual analysis, though, unlikely material deleted, don’t just copy line!","code":"library(oceglider) #> Loading required package: ncdf4 #> Loading required package: oce #> Loading required package: gsw url <- paste0(     \"https://cproof.uvic.ca/gliderdata/deployments/\",     \"dfo-bumblebee998/dfo-bumblebee998-20221207/\",     \"L0-timeseries/\",     \"dfo-bumblebee998-20221207_delayed.nc\" ) file <- gsub(\".*/\", \"\", url) # 45.8 MB file: download takes 0.4s user, 0.9s system but 11s elapsed if (!file.exists(file)) {     system.time(curl::curl_download(url = url, destfile = file, mode = \"wb\")) } g <- read.glider.netcdf(file) # under 0.2s summary(g) #> Glider Summary #> -------------- #>  #> * Type:       slocum #> * Subtype:    ? #> * Input file: #>     dfo-bumblebee998-20221207_delayed.nc #> * Time:       2022-12-07 16:15:54 to 2022-12-11 06:53:54 (mean increment 1.366 s) #> * Data Overview: #>                                        Min.       Mean      Max.   Dim.          OriginalName #>     latitude [°N]                    48.962     49.087    49.159 228325              latitude #>     longitude [°E]                  -127.35    -126.82    -125.9 228325             longitude #>     heading [rad]                 0.0081383     3.5527    6.2779 228325               heading #>     pitch [rad]                    -0.91705 -0.0039137   0.96655 228325                 pitch #>     roll [rad]                     -0.41012 -0.0049735   0.23825 228325                  roll #>     waypointLatitude [°N]                 0     48.033    48.852 228325     waypoint_latitude #>     waypointLongitude [°E]           -130.2    -128.77         0 228325    waypoint_longitude #>     conductivity [S/m]                2e-05     3.3763    3.5003 228325          conductivity #>     temperature [°C]                 3.4766     7.1911    14.208 228325           temperature #>     pressure [dbar]                 -0.2657     234.62    1039.6 228325              pressure #>     chlorophyll [mg/m³]              0.0219    0.24789    12.096 228325           chlorophyll #>     cdom [ppb]                      -3.8178    0.91799    97.899 228325                  cdom #>     backscatter700               0.00010584 0.00033849 0.0077169 228325       backscatter_700 #>     oxygenConcentration [μmol/l]      8.644     148.74    293.94 228325  oxygen_concentration #>     u [m/s]                        -0.51893   -0.12134   0.12245 228325                     u #>     v [m/s]                       -0.075335   0.070058   0.31982 228325                     v #>     depth [m]                      -0.26345     232.28    1028.2 228325                 depth #>     distanceOverGround                    0     85.221    155.63 228325  distance_over_ground #>     salinity                     4.3609e-06     33.197    34.369 228325              salinity #>     potentialDensity [kg/m³]         999.61       1026    1027.4 228325     potential_density #>     density [kg/m³]                  999.67     1026.9      1032 228325               density #>     potentialTemperature [°C]        3.4022     7.1654     10.95 228325 potential_temperature #>     profileIndex                          0     147.51       218 228325         profile_index #>     profileDirection                     -1   0.014065         1 228325     profile_direction #>  #> * Processing Log #>  #>     - 2025-02-20 19:14:11 UTC: `create 'glider' object` plot(g, which = \"map\") plot(g, which = \"p\") plot(g, which = \"p\", type = \"p\", pch = 20, cex = 0.2, colorby = \"temperature\") plot(g,     which = \"p\", type = \"p\", pch = 20, cex = 0.2, colorby = \"temperature\",     colorbylim = quantile(g[[\"temperature\"]], c(0.01, 0.99), na.rm = TRUE) ) plot(g, which = \"p\", type = \"p\", pch = 20, cex = 0.2, colorby = \"salinity\") plot(g,     which = \"p\", type = \"p\", pch = 20, cex = 0.2, colorby = \"salinity\",     colorbylim = quantile(g[[\"salinity\"]], c(0.01, 0.99), na.rm = TRUE) ) unlink(fileNC) # where the binary (NetCDF) file went"},{"path":"https://dankelley.github.io/oceglider/articles/slocum_glider.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Handling Slocum Glider Data","text":"https://cproof.uvic.ca/gliderdata/deployments/dfo-bumblebee998/dfo-bumblebee998-20221207/","code":""},{"path":"https://dankelley.github.io/oceglider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan Kelley. Author, maintainer. Clark Richards. Author. Chantelle Layton. Author.","code":""},{"path":"https://dankelley.github.io/oceglider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelley D, Richards C, Layton C (2025). oceglider: Analysis Oceanographic Glider Data. R package version 0.1.18, https://dankelley.github.io/oceglider/.","code":"@Manual{,   title = {oceglider: Analysis of Oceanographic Glider Data},   author = {Dan Kelley and Clark Richards and Chantelle Layton},   year = {2025},   note = {R package version 0.1.18},   url = {https://dankelley.github.io/oceglider/}, }"},{"path":"https://dankelley.github.io/oceglider/index.html","id":"oceglider","dir":"","previous_headings":"","what":"Analysis of Oceanographic Glider Data","title":"Analysis of Oceanographic Glider Data","text":"oceglider R package processing ocean glider data, support Slocum SeaExplorer devices. Since oceglider CRAN, must installed source. easy way use remotes package install github source. two main branches consider. one called “develop” active development, likely best one install want latest features. Use install “develop”. may also want consider installing “main” branch, updated less frequently “develop”. may installed note may lack important new features (bug fixes) found “develop”. authors work “develop” day day, merging “main” occasionally.","code":"remotes::install_github(\"dankelley/oceglider\", ref = \"develop\") remotes::install_github(\"dankelley/oceglider\", ref = \"main\")"},{"path":"https://dankelley.github.io/oceglider/reference/as.glider.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to glider format — as.glider","title":"Convert data to glider format — as.glider","text":"function returns glider object holds data provided data argument, units provided units argument. units argument optional, making function easy use interactive sessions, production code written units fully specified.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/as.glider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to glider format — as.glider","text":"","code":"as.glider(type, data, units)"},{"path":"https://dankelley.github.io/oceglider/reference/as.glider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to glider format — as.glider","text":"type Character value giving type glider, e.g. either seaexplorer slocum. data data frame containing data. copied straight payload1 item data slot returned value, without name translation. functions package work, data items named longitude, latitude, salinity, temperature pressure. units list holding units, names corresponding names data. See example format used units, note several items dataset given units, example.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/as.glider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert data to glider format — as.glider","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/as.glider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data to glider format — as.glider","text":"","code":"library(oceglider) directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.raw(directory, \"pld1.raw\", progressBar = FALSE) data <- g[[\"data\"]] units <- list(     temperature = list(unit = expression(degree * C), scale = \"ITS-90\"),     salinity = list(unit = expression(), scale = \"PSS-78\"),     pressure = list(unit = expression(dbar), scale = \"\"),     longitude = list(unit = expression(degree * E), scale = \"\"),     latitude = list(unit = expression(degree * N), scale = \"\") ) gg <- as.glider(\"seaexplorer\", data, units) par(mfrow = c(2, 1)) plot(g, which = \"p\") plot(gg, which = \"p\")"},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"SeaExplorer gliders save longitude latitude e.g. 4530.100 standing 45deg 30.1min (45.50167 conventional decimal format).  function converts SeaExplorer coordinate values conventional decimal values. SeaExplorer gliders save longitude latitude e.g. 4530.100 standing 45deg 30.1min (45.50167 conventional decimal format).  function converts SeaExplorer coordinate values conventional decimal values.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"","code":"degreeMinute(x)  degreeMinute(x)"},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"x Numerical value degree+minute notation (see “Examples”).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"degreeMinute() returns numerical value decimal degrees. degreeMinute() returns numerical value decimal degrees.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/degreeMinute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert longitude and latitude from a combined degree+minute formula — degreeMinute","text":"","code":"degreeMinute(4530.100) # 45+30.100/60 #> [1] 45.50167  degreeMinute(4530.100) # 45+30.100/60 #> [1] 45.50167"},{"path":"https://dankelley.github.io/oceglider/reference/deleteStartupData.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete data for an interval after each power-up event — deleteStartupData","title":"Delete data for an interval after each power-up event — deleteStartupData","text":"trims spurious data instruments can produce short time interval power-events.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/deleteStartupData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete data for an interval after each power-up event — deleteStartupData","text":"","code":"deleteStartupData(   x,   gapTime = 60,   deleteTime = 20,   stream = \"payload1\",   debug = getOption(\"gliderDebug\", default = 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/deleteStartupData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete data for an interval after each power-up event — deleteStartupData","text":"x [oceglider-class] object, e.g. read `read.read.glider.seaexplorer.raw()` similar functions. gapTime numeric value, seconds, used infer power-events.  always one event start time series. addition, time differences exceed `startupCriterion` seconds considered power-events, first time interval taken power-event. deleteTime numeric value indicating time interval, seconds, data removed. stream character value naming stream use, object multi-streamed, meaning `data` slot contains multiple data frames, one glider (named `glider`) another first payload (named `\"payload\"`), possibly payloads. value `stream` ignored unless object's `metadata` slot contains item named `dataAreStreamed` item TRUE. debug integer, less equal zero message, positive print information processing.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/deleteStartupData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delete data for an interval after each power-up event — deleteStartupData","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a Deconflicted Variable Name — getNextName","title":"Find a Deconflicted Variable Name — getNextName","text":"used name first temperature found `temperature`, second `temperature2`, etc.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a Deconflicted Variable Name — getNextName","text":"","code":"getNextName(name, existingNames)"},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a Deconflicted Variable Name — getNextName","text":"name character value indicating variable name. existingNames vector character values existing variable names.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a Deconflicted Variable Name — getNextName","text":"[getNextName] returns deconflicted version `name`.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find a Deconflicted Variable Name — getNextName","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/getNextName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a Deconflicted Variable Name — getNextName","text":"","code":"library(oceglider) e <- NULL e <- c(e, getNextName(\"S\", e)) e <- c(e, getNextName(\"T\", e)) e <- c(e, getNextName(\"S\", e)) e <- c(e, getNextName(\"T\", e)) e <- c(e, getNextName(\"p\", e)) print(e) #> [1] \"S\"  \"T\"  \"S2\" \"T2\" \"p\""},{"path":"https://dankelley.github.io/oceglider/reference/glider-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class to hold glider information — glider-class","title":"A class to hold glider information — glider-class","text":"2024-06-23, clear whether best policy inherit 'oce' define .  former might seem sensible, since might reduce need code , seems cause problems (e.g. inability build vignettes standard way) trouble understanding. ran similar problems argoFloats package , decided define object fully new package. now, approach used also. 2024-06-23, clear whether best policy inherit 'oce' define .  former might seem sensible, since might reduce need code , seems cause problems (e.g. inability build vignettes standard way) trouble understanding. ran similar problems argoFloats package , decided define object fully new package. now, approach used also.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/glider-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class to hold glider information — glider-class","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/gliderDebug.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a debugging message — gliderDebug","title":"Print a debugging message — gliderDebug","text":"Many glider functions decrease debug level 1 call functions, effect nesting, space deeper function level. Many glider functions decrease debug level 1 call functions, effect nesting, space deeper function level.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/gliderDebug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a debugging message — gliderDebug","text":"","code":"gliderDebug(debug = 0, ..., unindent = 0)  gliderDebug(debug = 0, ..., unindent = 0)"},{"path":"https://dankelley.github.io/oceglider/reference/gliderDebug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a debugging message — gliderDebug","text":"debug integer, less equal zero message, greater zero increasing levels debugging.  Values greater 4 treated like 4. ... items supplied cat(), printing.  Almost always, include trailing newline. unindent Number levels unindent, e.g. start end lines called function.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/gliderDebug.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a debugging message — gliderDebug","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Flags in glider Objects — handleGliderFlags","title":"Handle Flags in glider Objects — handleGliderFlags","text":"function may used set suspicious data NA, value, based values corresponding data-quality flags.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Flags in glider Objects — handleGliderFlags","text":"","code":"handleGliderFlags(   object,   flags = NULL,   actions = NULL,   where = \"payload1\",   debug = getOption(\"gliderDebug\", 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Flags in glider Objects — handleGliderFlags","text":"object object glider. flags list specifying flag values upon actions taken. can take two forms. first, list named elements containing vector integers. example, salinities flagged values 3 (\"suspect\"), 4 (\"fail\") 9 (\"missing\") specified flags=list(salinity=c(3,4,9)). Several data items can specified, e.g. flags=list(salinity=c(3,4,9),temperature=c(3,4,9)) indicates actions take place salinity temperature. second form, flags list unnamed vectors, means apply actions data entries; thus, flags=list(c(3,4,9)) means apply just salinity temperature, also everything else flags set . flags provided, attempt made set useful default. actions optional list contains items names match flags argument.  actions supplied, default set values identified flags NA; can also specified specifying actions=list(\"NA\"). also possible specify functions calculate replacement values. provided object single argument, must return replacement data item question. optional string permits data flags stored indirectly, e.g. data object@data[[]] instead object@data, flags object@metadata$flags[[]] instead object@metadata$flags. NULL, second forms used. scheme needed SeaExplorer data stored manner. debug optional integer specifying degree debugging, value 0 meaning skip debugging 1 higher meaning print information arguments data. usually good idea set 1 initial work dataset, see flags handled data item. supplied, defaults value \\link{getOption}(\"gliderDebug\",0).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle Flags in glider Objects — handleGliderFlags","text":"flags stored within object list named payload1, stored within list named flags stored object's metadata slot. flags flags$payload1 set object created, values inserted flags$payload1 inserted later, data read one read.glider* functions. example, read.glider.seaexplorer.raw() sets flags$payload1$salinity vector length matching data stored data$payload1$salinity, temperature things typically assessed part quality-assessment procedures. things set , also assigned numerical values, one element data set.  initial value set value 2, means not_evaluated IOOS 2017 quality-control scheme (see table 2 reference 1). numerical values provide way edit dataset convenient traceable way, appropriate setting flags actions arguments. Flag values may altered setGliderFlags(), illustrated “Examples” section.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Handle Flags in glider Objects — handleGliderFlags","text":"U.S. Integrated Ocean Observing System. \"Manual Real-Time Oceanographic Data Quality Control Flags, Version 1.2,\" https://cdn.ioos.noaa.gov/media/2020/07/QARTOD-Data-Flags-Manual_version1.2final.pdf.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle Flags in glider Objects — handleGliderFlags","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/handleGliderFlags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Flags in glider Objects — handleGliderFlags","text":"","code":"library(oceglider) directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.raw(directory, \"pld1.raw\", progressBar = FALSE)  # The histogram motivates a crude limit for anomalously low salinity. par(mfrow = c(1, 2), mar = c(3, 3, 1, 1), mgp = c(2, 0.75, 0)) hist(g[[\"salinity\"]], breaks = 100, xlab = \"Original Salinity\", main = \"\") abline(v = 31, col = 2)  # Flag value 3 means 'suspect' in the IOOS scheme [1, table]; other # flags are pass=1, not_evaluated=2 (the default as read), fail=4, and missing=9. g2 <- setGliderFlags(g, \"salinity\", g[[\"salinity\"]] < 31, 3) g3 <- handleGliderFlags(g2, c(3, 4, 9)) # use default action, which is \"NA\" hist(g3[[\"salinity\"]], breaks = 100, xlab = \"Trimmed Salinity\", main = \"\")"},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Possible navState values of a glider object — navStateCodes","title":"Possible navState values of a glider object — navStateCodes","text":"function provides names numerical navState codes used various gliders, aim making easier write self-explanatory code (see “Examples”).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Possible navState values of a glider object — navStateCodes","text":"","code":"navStateCodes(g)"},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Possible navState values of a glider object — navStateCodes","text":"g Either character string glider object. string, type glider, present version function must \"seaexplorer\". glider object, value navStateCodes metadata slot object returned, exists, else type item metadata slot used determine type, case g character string.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Possible navState values of a glider object — navStateCodes","text":"list integers defining navigation state, given brief name indicated “Details” section.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Possible navState values of a glider object — navStateCodes","text":"numerical values seaexplorer follows. Note downward portions profiles roughly signalled several inflecting_downwards codes followed descending codes, upward portions inflecting_upwards codes numerical values type slocum follows. ((defined m_depth_state slocum documentation; see pages 1-24 reference 1.)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Possible navState values of a glider object — navStateCodes","text":"1.Teledyne Webb Research. Slocum G2 Glider Operators Manual, January 2012. https://gliderfs2.coas.oregonstate.edu/gliderweb/docs/slocum_manuals/Slocum_G2_Glider_Operators_Manual.pdf.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Possible navState values of a glider object — navStateCodes","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/navStateCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Possible navState values of a glider object — navStateCodes","text":"","code":"# Use codes to identify upcasts, at least roughly (note the stray points) directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.raw(directory, \"pld1.raw\", progressBar = FALSE) ns <- navStateCodes(g) plot(g, which = \"p\") gd <- subset(g, navState == ns$descending) #> Error in eval(substitute(subset), x@data, parent.frame()): object 'ns' not found points(gd[[\"time\"]], gd[[\"pressure\"]], col = 2) #> Error: object 'gd' not found ga <- subset(g, navState == ns$asscending) #> Error in eval(substitute(subset), x@data, parent.frame()): object 'ns' not found points(ga[[\"time\"]], ga[[\"pressure\"]], col = 3) #> Error: object 'ga' not found mtext(\" red=descending; green=ascending\", side = 3, line = -1)"},{"path":"https://dankelley.github.io/oceglider/reference/oceGlider.html","id":null,"dir":"Reference","previous_headings":"","what":"oceglider: A Package for Processing Ocean Glider Data — oceglider","title":"oceglider: A Package for Processing Ocean Glider Data — oceglider","text":"package written two particular dataset types mind, SeaExplorer Slocum devices. good chance functions provided () fail types (b) function names arguments change datasets examined author. package written two particular dataset types mind, SeaExplorer Slocum devices. good chance functions provided () fail types (b) function names arguments change datasets examined author.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/oceGlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"oceglider: A Package for Processing Ocean Glider Data — oceglider","text":"Maintainer: Dan Kelley dan.kelley@dal.ca (ORCID) Authors: Clark Richards clark.richards@gmail.com (ORCID) Chantelle Layton layton.chantelle@gmail.com (ORCID)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/plot-glider-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a glider Object — plot,glider-method","title":"Plot a glider Object — plot,glider-method","text":"limited function intended quick views dataset. serious analysis best done extracting data using whatever graphical methods best suit task hand.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/plot-glider-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a glider Object — plot,glider-method","text":"","code":"# S4 method for class 'glider' plot(x, which, col = 1, colorby = NULL, colorbylim, simplify = NA, debug, ...)"},{"path":"https://dankelley.github.io/oceglider/reference/plot-glider-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a glider Object — plot,glider-method","text":"x [glider-class object. either integer character value specifying style used; see “Details”. col colour used lines characters. Note colorby provided, used point plots, instead col. colorby character value, ignored line plots, names data variable indicated plot colourization individual plotted points (.e. type=\"p\" must governing plot colorby effect). example, form temperature section plot can created plotting glider depth versus time, coloured temperature. reference, colour palette (using oce::oceColorsTurbo() displayed right plot.  See Example 3. colorbylim optional value, used colorby provided, set limits colorizing limits.  provided zlim argument oce::colormap(). simplify either NA integer value, supplied oce::oce.plot.ts() time-series plots. default value NA instructs oce::oce.plot.ts() try simplify plot breaking shorter time intervals finding ranges therein. can cause problems CRAN version oce (1.8-3, early 2025) cease cause problems oce 1.8-4 released, perhaps mid 2025. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth. ... ignored.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/plot-glider-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a glider Object — plot,glider-method","text":"form plot set argument, follows. =0 =\"map\": plot map sampling locations. can quite slow default plot type (using points), may find helpful use plot(g, type=\"l\") get quick plot. want change view, e.g. expanding coastline visible, start drawing coastline using oce package, add dots points(g[[\"longitude\"]], g[[\"latitude\"]] similar.  method flexible present plot() function. =1 =\"p\": time-series plot pressure, produced oce::oce.plot.ts(). =2 =\"T\": time-series plot temperature , produced oce::oce.plot.ts(). =3 =\"S\": time-series plot salinity, produced oce::oce.plot.ts(). =4 =\"TS\": temperature-salinity diagram, dots data produced oce::plotTS(). =5 =\"navState\": ignored except seaexplorer data, means plot time-series navigation state, stored navState item within payload1 element data slot. meanings navState values seaexplorer data : 105: glider navigating yet 115: glider surfacing, ballast centre gravity adjusted put antenna water 116: glider surface, acquiring GPS signal, communicating 110: ballast centre mass adjusted cause glider inflect downward 100: ballast diving position; adjustments may made adjust pitch heading 118: target depth altitude achieved, ballast centre mass adjusted inflect glider upwards 117: glider ascending, controls adjusted desired pitch heading Lines notes plot border indicate states, numerically phrases, inferred navStateCodes().","code":""},{"path":"https://dankelley.github.io/oceglider/reference/plot-glider-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a glider Object — plot,glider-method","text":"","code":"library(oceglider)  # Example 1: various plot types, using defaults directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.raw(directory, \"pld1.raw\", progressBar = FALSE) plot(g, which = \"p\")  plot(g, which = \"S\")  plot(g, which = \"T\")  plot(g, which = \"TS\")  plot(g, which = \"map\")  plot(g, which = \"navState\")   # Example 2: colour-code p by temperature, autoscaled plot(g, which = \"p\", type = \"p\", pch = 20, colorby = \"temperature\")   # Example 3: colour-code p by temperature, with a colour palette, # and more aesthetic control, e.g. setting limits using quantiles. temperature <- g[[\"temperature\"]] cm <- colormap(temperature,     zlim = quantile(temperature, c(0.01, 0.99), na.rm = TRUE),     col = oceColorsTurbo ) par(mar = c(2, 3.5, 2, 4)) drawPalette(colormap = cm) plot(g, which = \"p\", type = \"p\", col = cm$zcol, mar = c(2, 3.5, 2, 4), pch = 20)"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a glider data file — read.glider","title":"Read a glider data file — read.glider","text":"high-level function passes control read.glider.netcdf() first argument string ending \".nc\" read.glider.seaexplorer.raw() vector strings, contains text \"pld1.raw.\" followed one digits. high-level function passes control read.glider.netcdf() first argument string ending \".nc\" read.glider.seaexplorer.raw().","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a glider data file — read.glider","text":"","code":"read.glider(file, debug = getOption(\"gliderDebug\", default = 0), ...)  read.glider(file, debug = getOption(\"gliderDebug\", default = 0), ...)"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a glider data file — read.glider","text":"file character value giving name file. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth. ... extra parameters passed specific read.* functions.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a glider data file — read.glider","text":"glider object, .e. one inheriting glider. glider object, .e. one inheriting glider.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a glider data file — read.glider","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a glider file in netcdf format — read.glider.netcdf","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"provisional function, written handle particular files available author.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"","code":"read.glider.netcdf(   file,   saveGlobalAttributes = TRUE,   debug = getOption(\"gliderDebug\", default = 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"file character value holding name netcdf file holds glider data. saveGlobalAttributes logical value indicating whether read entirety global attributes stored within file metadata slot list named globalAttributes. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"glider object, .e. one inheriting glider. (class inherits oce::oce oce package.)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"data copied directly file, except time converted integer POSIX time. Variable names containing underscores renamed e.g. profile_direction profileDirection, although [[,glider-method mechanism works either name, e.g. g glider object, g[[\"profileDirection\"]] g[[\"profile_direction\"]] give result.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a glider file in netcdf format — read.glider.netcdf","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"provisional function, written handle provisional netcdf files created python pyglider processing chain well files downloaded Glider IOOS ERDDAP site.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"","code":"read.glider.netcdf.ioos(file, debug)"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"file Name netcdf file. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"glider object, .e. one inheriting glider. (class inherits oce::oce oce package.)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"data copied directly file, except time converted integer POSIX time. Variable names containing underscores renamed e.g. profile_direction profileDirection, although [[,glider-method mechanism works either name, e.g. g glider object, g[[\"profileDirection\"]] g[[\"profile_direction\"]] give result.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.netcdf.ioos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a glider file in netcdf IOOS format — read.glider.netcdf.ioos","text":"Chantelle Layton Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"Reads delayed-mode CSV files produced SeaExplorer glider, detected presence \".raw.\" names. delayed-mode data full resolution data stored glider downloaded recovery. (Use read.glider.seaexplorer.realtime() instead , read data transmitted glider field.)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"","code":"read.glider.seaexplorer.delayed(   directory,   yo,   level = 1,   interpolateToCTD = TRUE,   removeTimeSincePowerOn = 0,   progressBar = interactive(),   debug = getOption(\"gliderDebug\", default = 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"directory directory delayed-mode SeaExplorer files located. yo numeric value (vector) specifying yo numbers read. provided, read.glider.seaexplorer.delayed() read yo numbers files present dir. level numeric value specifying processing level, 0 1. See Details. interpolateToCTD logical indicating whether sensors interpolated CTD times obtain common time base, whether sensors simply interpolated time stamps (default behaviour 2019-12-08) removeTimeSincePowerOn numeric value indicating number seconds data trim, glider sensors powered . One way determine read whole sequence, plot say first 10 minutes salinity temperature data, looking transition aphysical values, might take form zero salinity, followed relatively rapid ramp-values seem oceanographic. progressBar logical value controls whether indicate progress made reading interpreting data.  can useful, since work can slow. default show progress interactive sessions, scripts. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"function can output either \"Level 0\" \"Level 1\" type data. Level 0 simply raw data written CSV files processing done. (Historical note: package varsion 0.1-14, released 2025-02-10, longitude latitude interpolated surface values level = 0. behaviour changed issue 127, https://github.com/dankelley/oceglider/issues/127). Level 1 processing performs number steps give \"analysis ready\" dataset, including Interpolation surface longitude latitude give estimate subsurface positions. crude estimate subsurface location taken first guess. Removal first sensor values glider navState=118 (inflecting ) navState=110 (inflecting ). reason glider set sample alternating profiles, CTD powered first sample output payload computer last sample recorded power . Interpolation, depending value interpolateToCTD. interpolateToCTD TRUE, \"extra\" sensors interpolated times CTD data. Otherwise, NAs sensors interpolated common time, corresponding raw time stamps output various sensors. caution – produce apparent \"upsampling\" sensor, apparent sample rate higher. example, Wetlabs FLBBCD sensor sampled, corresponding GP-CTD sample time, CTD parameters interpolated ones . disadvantage interpolating values measured, advantage assigning pressures values measured sensors integrated CTD (e.g. Wetlabs FLBBCD, Rinko O2). Following interpolation, rows duplicated times removed. Calculate Practical salinity conductivity, temperature pressure using oce::swSCTp(). case, flag scheme set according IOOS classification system (see Table 2 reference 1), follows.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"renaming-of-data-in-seaexplorer-files","dir":"Reference","previous_headings":"","what":"Renaming of data in seaexplorer files","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"FIXME: original names \"raw\" \"sub\" datasets? Data gli files stored glider item within data slot returned object, renamed follows. (Note also empty column seaexplorer data files, caused semicolon ends lines. read R, discarded stored glider object.) Data gli files stored glider item within data slot returned object, renamed follows. (new name listed . means old name retained, bear mind new name likely assigned later point development package.) Data pld1 files stored payload1 item within data slot returned object, renamed follows. possible, corresponding IOOS NetCDF file variable names also listed [see Integrated Ocean Observing System (U.S.). “NGDAC NetCDF File Format Version 2,” March 27, 2019. https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2]. Data pld2 files (others additional payloads) ignored version package. Please contact authors, need handle files.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"Clark Richards Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.delayed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Delayed-Mode SeaExplorer Glider Data — read.glider.seaexplorer.delayed","text":"","code":"library(oceglider) directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.delayed(directory, progressBar = FALSE) plot(g, which = \"p\")"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"Reads raw CSV files produced SeaExplorer glider. function can output either \"Level 0\" \"Level 1\" type data. Level 0 simply raw data written CSV files processing done except renaming variables oce convention (e.g. \"GPCTD_CONDUCTIVITY\" renamed \"conductivity\"), converting timestamp strings times, converting longitude latitude decimal degrees.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"","code":"read.glider.seaexplorer.raw(   directory,   pattern = \"pld1.raw\",   yo,   level = 1,   interpolateToCTD = TRUE,   rename = TRUE,   progressBar = interactive(),   missingValue = 9999,   debug = getOption(\"gliderDebug\", default = 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"directory directory delayed-mode SeaExplorer files located. pattern character value used find files read. default, \"pld1\", match files string name. best choices depends setup files. search files done list.files(directory, pattern), can good idea try first, learn specify desired files.  Also, try calling debug=1 get indication files get read debug=2 get full listing. yo numeric value (vector) specifying yo numbers read. provided, read.glider.seaexplorer.raw() read yo numbers files present dir. level numeric value specifying processing level, 0 See Details. interpolateToCTD logical indicating whether sensors interpolated CTD times obtain common time base, whether sensors simply interpolated time stamps (default behaviour 2019-12-08) rename indication () rename variables. needed practical work oce package, expects standardized names, \"temperature\", opposed names stored glider files. three choices rename. () can logical, TRUE (default) meaning use names defined system.file(\"extdata/dictionaries/seaexplorerDict.csv\",package=\"oceglider\") FALSE, meaning rename variables. (b) can name CSV file format file -named file.  (c) can data frame columns named gliderName oceName. progressBar logical value controls whether indicate progress made reading interpreting data.  can useful, since work can slow. default show progress interactive sessions, scripts. missingValue numeric value indicates bad data. data items equaling value converted NA. default 9999. avoid changing values NA, call function missingValue=NULL. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"Level 1 processing performs number steps give \"analysis ready\" dataset, including dataset lacks dead-reckoning column, surface longitude latitude readings interpolated respect time, provide crude estimate subsurface positions. Interpolation, depending value interpolateToCTD. interpolateToCTD TRUE, \"extra\" sensors interpolated times CTD data. Otherwise, NAs sensors interpolated common time, corresponding raw time stamps output various sensors. caution – produce apparent \"upsampling\" sensor, apparent sample rate higher. example, Wetlabs FLBBCD sensor sampled, corresponding GP-CTD sample time, CTD parameters interpolated ones . disadvantage interpolating values measured, advantage assigning pressures values measured sensors integrated CTD (e.g. Wetlabs FLBBCD, Rinko O2). Following interpolation, rows duplicated times removed. calculation Practical salinity conductivity, temperature pressure using oce::swSCTp(). case, flag scheme set according IOOS classification system (see Table 2 reference 1), follows.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"historical-notes","dir":"Reference","previous_headings":"","what":"Historical notes","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"package version 0.1-14, released 2025-02-10, longitude latitude interpolated surface values case level given 0. behaviour changed issue 127, https://github.com/dankelley/oceglider/issues/127). package version 0.1-16, released 2025-02-15, data erased power-events, controlled parameter named removeTimeSincePowerOn. Now, similar action may accomplished calling deleteStartupData() return object present function.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"renaming-of-data-in-seaexplorer-files","dir":"Reference","previous_headings":"","what":"Renaming of data in seaexplorer files","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"FIXME: original names \"raw\" \"sub\" datasets? Data gli files stored glider item within data slot returned object, renamed follows. (Note also empty column seaexplorer data files, caused semicolon ends lines. read R, discarded stored glider object.) Data gli files stored glider item within data slot returned object, renamed follows. (new name listed . means old name retained, bear mind new name likely assigned later point development package.) Data pld1 files stored payload1 item within data slot returned object, renamed follows. possible, corresponding IOOS NetCDF file variable names also listed [see Integrated Ocean Observing System (U.S.). “NGDAC NetCDF File Format Version 2,” March 27, 2019. https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2]. Data pld2 files (others additional payloads) ignored version package. Please contact authors, need handle files.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"history-of-changes-to-this-function","dir":"Reference","previous_headings":"","what":"History of changes to this function","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"version 0.1.16, removeTimeSincePowerOn parameter removed. new scheme user call deleteStartupData() return value, accomplish similar thing.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"Clark Richards, Chantelle Layton Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Raw SeaExplorer Data — read.glider.seaexplorer.raw","text":"","code":"library(oceglider)  directory <- system.file(\"extdata/sea_explorer/delayed_raw\",     package =         \"oceglider\" ) g <- read.glider.seaexplorer.raw(directory, progressBar = FALSE) plot(g, which = \"p\")"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"Reads real-time CSV files produced SeaExplorer glider, detected presence \".sub.\" names. real-time data decimated transmission, thus represent full data collected glider sensors. (Use [read.glider.seaexplorer.raw)] instead , read delayed-mode data, downloaded glider recovery.) [read.glider.seaexplorer.raw)]: R:read.glider.seaexplorer.raw)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"","code":"read.glider.seaexplorer.realtime(   directory,   yo,   level = 1,   progressBar = interactive(),   missingValue = 9999,   debug )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"directory directory realtime SeaExplorer files located. yo numeric value (vector) specifying yo numbers read. provided, read.glider.seaexplorer.raw() read yo numbers files present dir. level Ignored read.glider.seaexplorer.realtime included similarity read.glider.seaexplorer.raw(). progressBar logical value controls whether indicate progress made reading interpreting data.  can useful, since work can slow. default show progress interactive sessions, scripts. missingValue value indicates missing data; values match set NA. debug integer specifying whether debugging information printed processing. provided, value getOption(\"gliderDebug\",0) used. printing done call gliderDebug. Setting debug=0 turns form debugging, higher values may yield information, depending function. one glider function calls another, passes value debug decreased 1, means value debug controls just breadth debugging, also depth.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"flag-scheme","dir":"Reference","previous_headings":"","what":"Flag Scheme","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"flag scheme set according IOOS classification system (see Table 2 reference 1), follows.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"renaming-of-data-in-seaexplorer-files","dir":"Reference","previous_headings":"","what":"Renaming of data in seaexplorer files","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"FIXME: original names \"raw\" \"sub\" datasets? Data gli files stored glider item within data slot returned object, renamed follows. (Note also empty column seaexplorer data files, caused semicolon ends lines. read R, discarded stored glider object.) Data gli files stored glider item within data slot returned object, renamed follows. (new name listed . means old name retained, bear mind new name likely assigned later point development package.) Data pld1 files stored payload1 item within data slot returned object, renamed follows. possible, corresponding IOOS NetCDF file variable names also listed [see Integrated Ocean Observing System (U.S.). “NGDAC NetCDF File Format Version 2,” March 27, 2019. https://github.com/ioos/ioosngdac/wiki/NGDAC-NetCDF-File-Format-Version-2]. Data pld2 files (others additional payloads) ignored version package. Please contact authors, need handle files.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"IOOS. “Manual Real-Time Oceanographic Data Quality Control Flags,” May 2017. https://cdn.ioos.noaa.gov/media/2017/12/QARTOD-Data-Flags-Manual_Final_version1.1.pdf.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"Dan Kelley Clark Richards","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.seaexplorer.realtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read real-time SeaExplorer glider data — read.glider.seaexplorer.realtime","text":"","code":"library(oceglider) directory <- system.file(\"extdata/sea_explorer/realtime_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.realtime(directory, progressBar = FALSE) plot(g, which = \"navState\")  plot(g, which = \"S\")  plot(g, which = \"T\")"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"function handles CSV format used files made available author time 2010s. meantime, community settled formats, NetCDF (see read.glider.netcdf() read files).  reason, plans extend even maintain function.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"","code":"read.glider.slocum.csv(   file,   nameMap = list(conductivity = \"sci_water_cond\", temperature = \"sci_water_temp\",     pressure = \"sci_water_pressure\", longitude = \"lon\", latitude = \"lat\", depth =     \"i_depth\", debug = getOption(\"gliderDebug\", default = 0)) )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"file connection character string giving name file load. nameMap List used rename data columns. See “Details”. debug integer controlling amount debugging output printed. Use 0 output, 1 .","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"oce object holding data, variables renamed described “Details”, salinity added, calculated oce::swSCTp() uses UNESCO algorithm assumes conductivity values stored S/m units.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Slocum Glider File in CSV Format — read.glider.slocum.csv","text":"","code":"library(oceglider) if (file.exists(\"~/slocum.csv\")) {     g <- read.glider.slocum.csv(\"~/slocum.csv\")     summary(g)      # 1. Plot time-depth trace, colour-coded for temperature     par(mar = c(3, 3, 1, 1), mgp = c(2, 0.7, 0)) # thin margins     cm <- colormap(z = g[[\"temperature\"]])     drawPalette(colormap = cm, cex.axis = 3 / 4)     t <- g[[\"time\"]]     p <- g[[\"depth\"]]     plot(t, p,         ylim = rev(range(p, na.rm = TRUE)),         xlab = \"Time\", ylab = \"Pressure [dbar]\",         col = cm$zcol, cex = 1 / 2, pch = 20     )     mtext(paste(\"Temperature, from\", t[1]), cex = 3 / 4)      # 2. Plot distance-depth trace, colour-coded for temperature     dist <- geodDist(g[[\"longitude\"]], g[[\"latitude\"]], alongPath = TRUE)     par(mar = c(3, 3, 1, 1), mgp = c(2, 0.7, 0)) # thin margins     cm <- colormap(z = g[[\"temperature\"]])     drawPalette(colormap = cm, cex.axis = 3 / 4)     p <- g[[\"depth\"]]     plot(dist, p,         ylim = rev(range(p, na.rm = TRUEp)),         xlab = \"Distance [km]\", ylab = \"Pressure [dbar]\",         col = cm$zcol, cex = 1 / 2, pch = 20     )     mtext(paste(\"Temperature, from\", t[1]), cex = 3 / 4) }"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Slocum Glider file — read.glider.slocum","title":"Read a Slocum Glider file — read.glider.slocum","text":"files use standard names variables, nameMap argument facilitates renaming storage returned object. (Renaming simplifies later analysis, e.g. permitting direct use algorithms oce package, assume salinity named \"salinity\", etc.) original names data items retained metadata returned object, [[ operator oce package can retrieve data using either original name (e.g. x[[\"sci_water_temp\"]]) standard name (e.g. x[[\"temperature\"]]).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Slocum Glider file — read.glider.slocum","text":"","code":"read.glider.slocum(   file,   nameMap = list(conductivity = \"sci_water_cond\", temperature = \"sci_water_temp\",     pressure = \"sci_water_pressure\", longitude = \"lon\", latitude = \"lat\", depth =     \"i_depth\", debug = getOption(\"gliderDebug\", default = 0)) )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Slocum Glider file — read.glider.slocum","text":"file connection character string giving name file load. nameMap List used rename data columns. See “Details”. debug integer controlling amount debugging output printed. Use 0 output, 1 .","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Slocum Glider file — read.glider.slocum","text":"oce object holding data, variables renamed described “Details”, salinity added, calculated oce::swSCTp() uses UNESCO algorithm assumes conductivity values stored S/m units.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a Slocum Glider file — read.glider.slocum","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Slocum Glider file — read.glider.slocum","text":"","code":"library(oceglider) if (file.exists(\"~/slocum.csv\")) {     g <- read.glider.slocum(\"~/slocum.csv\")     summary(g)      # 1. Plot time-depth trace, colour-coded for temperature     par(mar = c(3, 3, 1, 1), mgp = c(2, 0.7, 0)) # thin margins     cm <- colormap(z = g[[\"temperature\"]])     drawPalette(colormap = cm, cex.axis = 3 / 4)     t <- g[[\"time\"]]     p <- g[[\"depth\"]]     plot(t, p,         ylim = rev(range(p, na.rm = TRUE)),         xlab = \"Time\", ylab = \"Pressure [dbar]\",         col = cm$zcol, cex = 1 / 2, pch = 20     )     mtext(paste(\"Temperature, from\", t[1]), cex = 3 / 4)      # 2. Plot distance-depth trace, colour-coded for temperature     dist <- geodDist(g[[\"longitude\"]], g[[\"latitude\"]], alongPath = TRUE)     par(mar = c(3, 3, 1, 1), mgp = c(2, 0.7, 0)) # thin margins     cm <- colormap(z = g[[\"temperature\"]])     drawPalette(colormap = cm, cex.axis = 3 / 4)     p <- g[[\"depth\"]]     plot(dist, p,         ylim = rev(range(p, na.rm = TRUEp)),         xlab = \"Distance [km]\", ylab = \"Pressure [dbar]\",         col = cm$zcol, cex = 1 / 2, pch = 20     )     mtext(paste(\"Temperature, from\", t[1]), cex = 3 / 4) }"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"provisional function, written handle particular file created Spring 2023 MUN researchers, part OTN project.  Please consult “Slocum Gliders” vignette information file.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"","code":"read.glider.slocum.netcdf(   file,   readAll = FALSE,   nameMap = list(salinity = \"glider_record/sci_rbrctd_salinity_00\", SA =     \"absolute_salinity\", temperature = \"glider_record/sci_rbrctd_temperature_00\", CT =     \"conservative_temperature\", pressure = \"glider_record/sci_rbrctd_seapressure_00\",     time = \"glider_record/sci_rbrctd_timestamp\", conductivity =     \"glider_record/sci_rbrctd_conductivity_00\", latitude = \"glider_record/m_gps_lat\",     longitude = \"glider_record/m_gps_lon\", profileLat = \"profile_lat\", profileLon =     \"profile_lon\", density = \"density\", oxygen = \"oxygen_concentration\",       u = \"u\", v     = \"v\", vxi = \"glider_record/m_initial_water_vx\", vyi =     \"glider_record/m_initial_water_vy\", vy = \"glider_record/m_water_vy\", vx =     \"glider_record/m_water_vx\", id = \"profile_id\"),   debug = 0 )"},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"file Name netcdf file. readAll logical value indicating whether read data columns file.  default, FALSE, means read columns appear nameMap.  Using FALSE can yield significant decreases processing time memory usage.  2 Gb test file used coding function (, admittedly, seems great deal duplication near-duplication data), setting readAll FALSE drops reading time 12 s 1.5s, size resultant value 2.0Gb 0.28 Gb. nameMap either character value list.  first case, permitted possibility nameMap=\"?\", instructs read.glider.slocum.netcdf() return vector variable names determined scanning file. Examining list can useful first step exploration data file.  variables known, makes sense use list form nameMap, perhaps starting default value. debug integer controlling much information printed processing.  0, errors warnings printed.  1, function entry exit signalled, line printed variable read.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"glider object, .e. one inheriting glider. (class inherits oce::oce oce package.)","code":""},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"Since different files might use different naming conventions data, helpful establish mapping names file names stored return object.  nameMap argument .  file may contain information guide user various possibilities use, although reference documents, consultation data provider may required.  , see “Slocum Gliders” vignette topic.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/read.glider.slocum.netcdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a glider file in a Slocum netcdf format — read.glider.slocum.netcdf","text":"Dan Kelley, aided Cameron Richardson data names.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/setGliderFlags.html","id":null,"dir":"Reference","previous_headings":"","what":"Set data-quality flags within a glider object — setGliderFlags","title":"Set data-quality flags within a glider object — setGliderFlags","text":"function changes specified entries data-quality flags glider objects. flags stored within list named flags$payload1 resides metadata slot.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/setGliderFlags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set data-quality flags within a glider object — setGliderFlags","text":"","code":"setGliderFlags(   object,   name = NULL,   i = NULL,   value = NULL,   debug = getOption(\"gliderDebug\", 0) )"},{"path":"https://dankelley.github.io/oceglider/reference/setGliderFlags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set data-quality flags within a glider object — setGliderFlags","text":"object glider object, .e. object inheriting glider-class. name Character string indicating name variable flagged. variable contained object's data slot, error reported. three choices . First, ==\"\", existing flags named item discarded, replaced new value.  Second, vector integers, flags set value indices given . Third, logical vector length data, just indices match TRUE values set value. value value inserted flag. debug Integer set 0 quiet action 1 debugging.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/setGliderFlags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set data-quality flags within a glider object — setGliderFlags","text":"object flags set indicated.","code":""},{"path":[]},{"path":"https://dankelley.github.io/oceglider/reference/setGliderFlags.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set data-quality flags within a glider object — setGliderFlags","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Part of a glider Object — [[,glider-method","title":"Retrieve Part of a glider Object — [[,glider-method","text":"Retrieve something contained glider object, something can computed contained .","code":""},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Part of a glider Object — [[,glider-method","text":"","code":"# S4 method for class 'glider' x[[i, j, ...]]"},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Part of a glider Object — [[,glider-method","text":"x glider object, .e. one inheriting glider. character value names item retrieved. j optional character value specifying data-stream used. ... optional additional information (ignored).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Part of a glider Object — [[,glider-method","text":"First, check done see object's metadata contains item name given . true, value returned. Otherwise, item sought somewhere within data slot. may done within data directly Slocum data within data$payload similar name SeaExplorer data.  Note [[ can retrieve just actual stored information, also information can derived information. example, gliders store Absolute Salinity Conservative Temperature, can retrieved g[[\"SA\"]] g[[\"CT\"]] respectively, g glider object (see Example 1).  Use e.g. g[[\"?\"]] given glider object, find items [[ can retrieve (see Example 2).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Part of a glider Object — [[,glider-method","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/sub-sub-glider-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Part of a glider Object — [[,glider-method","text":"","code":"library(oceglider) directory <- system.file(\"extdata/sea_explorer/delayed_raw\", package = \"oceglider\") g <- read.glider.seaexplorer.raw(directory, pattern = \"pld1.raw\")  # Example 1: look up Absolute Salinity summary(g[[\"SA\"]]) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's  #>  0.00751  0.00882 32.38614 22.19193 32.40267 32.77709      194   # Example 2: discover what can be retrieved from this object # (FIXME: not all of these work) g[[\"?\"]] #>  [1] \"Absolute Salinity\"        \"CT\"                       #>  [3] \"Conservative Temperature\" \"N2\"                       #>  [5] \"Rrho\"                     \"RrhoSF\"                   #>  [7] \"SA\"                       \"SP\"                       #>  [9] \"SR\"                       \"Sstar\"                    #> [11] \"backscatter\"              \"backscatterCount\"         #> [13] \"cdom\"                     \"cdomCount\"                #> [15] \"chlorophyll\"              \"chlorophyllCount\"         #> [17] \"conductivity\"             \"density\"                  #> [19] \"depth\"                    \"latitude\"                 #> [21] \"longitude\"                \"navState\"                 #> [23] \"oxygen\"                   \"oxygenFrequency\"          #> [25] \"oxygenTemperature\"        \"potential temperature\"    #> [27] \"pressure\"                 \"pressureNav\"              #> [29] \"salinity\"                 \"sigma0\"                   #> [31] \"sigma1\"                   \"sigma2\"                   #> [33] \"sigma3\"                   \"sigma4\"                   #> [35] \"sigmaTheta\"               \"sound speed\"              #> [37] \"spice\"                    \"spiciness0\"               #> [39] \"spiciness1\"               \"spiciness2\"               #> [41] \"temperature\"              \"theta\"                    #> [43] \"time\"                     \"x\"                        #> [45] \"yoNumber\"                 \"z\""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a glider Object — subset,glider-method","title":"Subset a glider Object — subset,glider-method","text":"Select portion glider object, specified according one several possible schemes, based form argument named subset. Note schemes combined, nested calls must used accomplish combinations.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a glider Object — subset,glider-method","text":"","code":"# S4 method for class 'glider' subset(x, subset, ...)"},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a glider Object — subset,glider-method","text":"x oceglider object, .e. one inheriting glider. subset logical expression character string indicates take subset. See “Details”. ... Additional arguments, one permitted moment debug, integer indicating level debugging information permitted.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a glider Object — subset,glider-method","text":"oceglider object.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset a glider Object — subset,glider-method","text":"Scheme 1: subset logical expression written terms data stored yos, expression applied payload1 item data slot object (see Example 1). Scheme 2: subset logical expression containing word \"yolength\", expression used filter select yos based number samples contain (see Example 2). Typically, might used avoid short yos might inferred erroneously glider instrumentation. Scheme 3: subset string \"ascending\", ascending segments yos retained. done selecting navState==117 glider payload1 streams data slot object. Scheme 4: subset string \"descending\", descending segments yos retained. done selecting navState==100 glider payload1 streams data slot object.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"bugs","dir":"Reference","previous_headings":"","what":"Bugs","title":"Subset a glider Object — subset,glider-method","text":"'ascending' 'descending' methods work. seems problem exporting classes using roxygen2 tags. looking .  DK 2019-03-28.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset a glider Object — subset,glider-method","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/subset-glider-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a glider Object — subset,glider-method","text":"","code":"if (FALSE) { # \\dontrun{  # Example 1. remove wild salinities library(oceglider) g <- read.glider(filename) gg <- subset(g, 0 < salinity & salinity < 40) par(mfrow = c(2, 1)) hist(g[[\"salinity\"]], main = \"S original\") hist(gg[[\"salinity\"]], main = \"S cleaned\")  # Example 2. remove short yos gg <- subset(g, yolength > 4)  # Example 3. retain only ascending portions of yos gascending <- subset(g, \"ascending\")  # Example 4. retain only descending portions of yos gdescending <- subset(g, \"descending\") } # }"},{"path":"https://dankelley.github.io/oceglider/reference/summary-glider-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a glider Object — summary,glider-method","title":"Summarize a glider Object — summary,glider-method","text":"Summarize glider Object","code":""},{"path":"https://dankelley.github.io/oceglider/reference/summary-glider-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a glider Object — summary,glider-method","text":"","code":"# S4 method for class 'glider' summary(object, ...)"},{"path":"https://dankelley.github.io/oceglider/reference/summary-glider-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a glider Object — summary,glider-method","text":"object glider object, .e. one inheriting glider-class. ... arguments passed methods.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenFrequencyToSaturation.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","title":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","text":"calibration formula comes SBE calibration sheets. code based `sbeO2Hz2Sat()` https://github.com/DFOglider/pilotingApp, minor modifications: (1) new name avoid conflicts, (2) calibration coefficients collected single parameter, `cal`, (3) `oxygenFrequency` renamed `frequency`, (3) `unit` added, permit specifying unit return value, (5) conversion umol/kg takes account density, indicated Reference 1.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenFrequencyToSaturation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","text":"","code":"swOxygenFrequencyToSaturation(   temperature,   salinity,   pressure,   frequency,   cal,   unit = \"ml/l\" )"},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenFrequencyToSaturation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","text":"temperature numeric value holding temperature degrees C. salinity numeric value holding Practical Salinity. pressure numeric value holding pressure dbar. frequency frequency reading oxygen sensor system, Hz. cal list data frame holding calibration parameters named `Soc`, `Foffset`, ``, `B`, `C`, `D` `Enom`.  last called \"E nominal\" calibration sheets. unit character value indicating desired unit. default `ml/l` `umol/kg` also accepted, latter computed multiplying former `44.6591*1000/(1000+sigma0)`, `sigma0` seawater potential density anomaly kg/m^3 (see Reference 1, uses mole fraction stated Reference 2).","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenFrequencyToSaturation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","text":"1. Thierry, Virginie, Henry Bittig, Denis Gilbert, Taiyo Kobayashi, Sato Kanako, Claudia Schmid. \"Processing Argo Oxygen Data DAC Level (version 2.3.3)\". Ifremer, 2022. doi:10.13155/39795 2. Garcia, Herncin E., Louis . Gordon. \"Oxygen Solubility Seawater: Better Fitting Equations.\" Limnology Oceanography 37, . 6 (September 1992): 1307–12. doi:10.4319/lo.1992.37.6.1307","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenFrequencyToSaturation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert SBE Oxygen Frequency Value to Oxygen Saturation — swOxygenFrequencyToSaturation","text":"Chantelle Layton Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenSolubility.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Oxygen Solubility of Seawater — swOxygenSolubility","title":"Compute Oxygen Solubility of Seawater — swOxygenSolubility","text":"function copy Chantelle Layton's `swOxygen()` function, https://github.com/DFOglider/pilotingApp repository, renamed avoid name-resolution conflicts.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenSolubility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Oxygen Solubility of Seawater — swOxygenSolubility","text":"","code":"swOxygenSolubility(temperature, salinity)"},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenSolubility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Oxygen Solubility of Seawater — swOxygenSolubility","text":"temperature numeric value holding temperature degrees C. salinity numeric value holding Practical Salinity.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/swOxygenSolubility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Oxygen Solubility of Seawater — swOxygenSolubility","text":"Chantelle Layton","code":""},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a string from snake_case to camelCase — toCamelCase","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"Convert snake-case string (.e., one constructed words separated underlines) camel-case string (.e. one words strung together, upper-case first letter first word).  See ‘Examples’. Convert snake-case string (.e., one constructed words separated underlines) camel-case string (.e. one words strung together, upper-case first letter first word).  See ‘Examples’.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"","code":"toCamelCase(s)  toCamelCase(s)"},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"s character value converted.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"toCamelCase() returns camelCase version s. toCamelCase() returns camelCase version s.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/reference/toCamelCase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a string from snake_case to camelCase — toCamelCase","text":"","code":"toCamelCase(\"profile_direction\") # \"profileDirection\" #> [1] \"profileDirection\"  toCamelCase(\"profile_direction\") # \"profileDirection\" #> [1] \"profileDirection\""},{"path":"https://dankelley.github.io/oceglider/reference/urlExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a URL exists, backtracing by separators, if not — urlExists","title":"Check whether a URL exists, backtracing by separators, if not — urlExists","text":"uses RCurl::url.exists() see indicated URL exists. , attempt made find lower-level URL exist. done progressively removing items separated \"/\" url","code":""},{"path":"https://dankelley.github.io/oceglider/reference/urlExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a URL exists, backtracing by separators, if not — urlExists","text":"","code":"urlExists(url, quiet = FALSE)"},{"path":"https://dankelley.github.io/oceglider/reference/urlExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a URL exists, backtracing by separators, if not — urlExists","text":"url Character value specifying URL. / present end string, added checks done. quiet Logical value indicating whether print suggestion alternative website, case url exist.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/urlExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a URL exists, backtracing by separators, if not — urlExists","text":"logical value indicating whether website indicated url exists.","code":""},{"path":"https://dankelley.github.io/oceglider/reference/urlExists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether a URL exists, backtracing by separators, if not — urlExists","text":"Dan Kelley","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0118","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.18","title":"oceglider 0.1.18","text":"Change read.glider.seaexplorer.raw() handle filename data-frame values rename parameter.","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0117","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.17","title":"oceglider 0.1.17","text":"Change read.glider.seaexplorer.raw() accept new parameter rename, accordance issue #126.","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0116","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.16","title":"oceglider 0.1.16","text":"Add deleteStartupData(), remove removeTimeSincePowerOn parameter read.glider.seaexplorer.raw(), accordance issue #132. Remove read.glider.seaexplorer.realtime() supplanted read.glider.seaexplorer.raw() (decided discussion issue #130).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0115","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.15","title":"oceglider 0.1.15","text":"Change read.glider.seaexplorer.raw() read data streams separately (issue #128). Rename read.glider.seaexplorer.delayed() read.glider.seaexplorer.raw() (decided discussion issue #128).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0114","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.14","title":"oceglider 0.1.14","text":"Change read.glider.seaexplorer.delayed() interpolate longitude latitude surfacing events level=0 usage (issue #127).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0113","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.13","title":"oceglider 0.1.13","text":"Change read.glider.netcdf() handle new parameter named saveGlobalAttributes (issue #125).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0112","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.12","title":"oceglider 0.1.12","text":"Change plot.glider() handle new parameter named simplify.","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0111","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.11","title":"oceglider 0.1.11","text":"Add sample data SeaExplorer raw. Rewrite vignettes download files CPROOF. Rename read.glider.slocum() read.glider.slocum.csv() make (limited) purpose clearer. Also, add notes lack intention maintain ad-hoc function.","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-0110","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.10","title":"oceglider 0.1.10","text":"Rename flag functions avoid conflict oce, e.g. oce functions named setFlags() handleFlags() replaced setGliderFlags() handleGliderFlags() oceglider. Correct formula used convert oxygen ml/l umol/kg, used swOxygenFrequencyToSaturation().","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-019","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.9","title":"oceglider 0.1.9","text":"Change oxygen calibration. think computation wrong , ’ve checked issue .","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-018","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.8","title":"oceglider 0.1.8","text":"Change read.glider.slocum.netcdf() default debug parameter (issue #101).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-017","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.7","title":"oceglider 0.1.7","text":"Change plot.glider() fix map axis mix-(issue #98). Make [[\"z\"]] [[\"?\"]] work.","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-016","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.6","title":"oceglider 0.1.6","text":"Change plot.glider() adding colorbylim argument. Require R version 4.1.0 later (pipes).","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-015","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.5","title":"oceglider 0.1.5","text":"Rename oceanglider oceglider. Add plot.glider().","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-014","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.4","title":"oceglider 0.1.4","text":"Add read.glider.slocum.netcdf() Revamp README badges","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-013","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.3","title":"oceglider 0.1.3","text":"fix test-suite problems identified today’s R","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-012","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.2","title":"oceglider 0.1.2","text":"add navStateCodes() add read.glider.netcdf() add read.seaexplorer.*() rename read.glider() read.slocum()","code":""},{"path":"https://dankelley.github.io/oceglider/news/index.html","id":"oceglider-010","dir":"Changelog","previous_headings":"","what":"oceglider 0.1.0","title":"oceglider 0.1.0","text":"crude code tested Dalhousie Slocum files.","code":""}]

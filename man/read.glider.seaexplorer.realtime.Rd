% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seaexplorer.R
\name{read.glider.seaexplorer.realtime}
\alias{read.glider.seaexplorer.realtime}
\title{Read real-time SeaExplorer glider data}
\usage{
read.glider.seaexplorer.realtime(files, debug, missingValue = 9999)
}
\arguments{
\item{files}{Either a single integer, in which case it specifies
a yo number for a local file, or a character value of length 2
that provides the names of two local files, one (typically
with \code{gli} in its filename) representing
measurements made by sensors on the glider,
and the other (with \code{pld1} in its filename) representing
measurements made by sensors in the glider's payload. For the
the case of \code{files} being an integer, all local filenames are
found, and name-matching is done to try to find the \code{gli}
and \code{pld1} files.}

\item{debug}{an integer specifying whether debugging information is
to be printed during processing. If this is not provided, then
the value of \code{\link{getOption}("gliderDebug",0)} is used.
The printing is done by a call to \code{\link{gliderDebug}}.
Setting \code{debug=0} turns off this form of debugging, while
higher values may yield more information, depending on the
function. If one \code{glider} function calls another, it
passes the value of \code{debug} but decreased by 1, which means
that the value of \code{debug} controls not just the breadth
of debugging, but also the depth.}

\item{missingValue}{Numerical value for missing data; all such values
are set to \code{NA} in the data as interpreted. The default value
works for one particular mission that was examined, but it might
not apply to other missions. When in doubt as to the correct value,
use \code{summary()} on the returned object, and check to see if the
data maximum is a peculiar value, e.g. 99, 999 or, as the default, 9999.}
}
\description{
Reads real-time CSV files produced by a SeaExplorer glider. The
real-time data are decimated before transmission, and thus do not
represent the full data collected by the glider sensors.
}
\details{
While the data format is similar to the "raw" SeaExplorer file
format, there are some differences and
\code{read.glider.explorer.raw()} should be used for the latter.

FIXME: write paragraph on the flag scheme here; include reference,
page number etc. at this point.
}
\examples{
library(oceanglider)
## # Download and read a file (default server, mission, etc)
## yo <- 200
## url <- "ftp://ftp.dfo-mpo.gc.ca/glider/realData/SEA024/M32"
## filenames <- download.glider(url, paste("\\\\.", yo, "\\\\.gz$", sep=""), debug=1)
files <- system.file("extdata/seaexplorer/realtime",
                     c("sea024.32.gli.sub.200.gz",
                       "sea024.32.pld1.sub.200.gz"), package="oceanglider")
d <- read.glider.seaexplorer.realtime(files)
ctd <- as.ctd(d[['salinity']], d[['temperature']], d[['pressure']],
              longitude=d[['longitude']], latitude=d[['latitude']])
plot(ctd)
## Isolate the upcast, inferred with oce::ctdTrim().
plot(ctdTrim(ctd, "upcast"))
## Isolate the upcast, using d[["NAV_RESOURCE"]]==117;
## note that the downcast has code 100.
plot(subset(ctd, d[["NAV_RESOURCE"]]==117))

}
\seealso{
Other functions for seaexplorer gliders: \code{\link{download.glider.seaexplorer}},
  \code{\link{read.glider.seaexplorer.raw}}

Other functions to read glider data: \code{\link{read.glider.netcdf}},
  \code{\link{read.glider.slocum}}
}
\author{
Dan Kelley and Clark Richards
}
\concept{functions for seaexplorer gliders}
\concept{functions to read glider data}

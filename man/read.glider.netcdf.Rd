% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oceanglider.R
\name{read.glider.netcdf}
\alias{read.glider.netcdf}
\title{Read a glider file in netcdf format}
\usage{
read.glider.netcdf(file, debug)
}
\arguments{
\item{file}{Name of a netcdf file.}

\item{debug}{an integer specifying whether debugging information is
to be printed during processing. If this is not provided, then
the value of \code{\link{getOption}("gliderDebug",0)} is used.
The printing is done by a call to \code{\link{gliderDebug}}.
Setting \code{debug=0} turns off this form of debugging, while
higher values may yield more information, depending on the
function. If one \code{glider} function calls another, it
passes the value of \code{debug} but decreased by 1, which means
that the value of \code{debug} controls not just the breadth
of debugging, but also the depth.}
}
\value{
A glider object, i.e. one inheriting from \linkS4class{glider}.
(This class inherits from \link[oce:oce-class]{oce::oce} in the
\CRANpkg{oce} package.)
}
\description{
\strong{This is a provisional function, written to handle some
particular files available to the author.}
}
\details{
The data are copied directly from the file, except that \code{time}
is converted from an integer to a POSIX time. Variable names containing
underscores are renamed as e.g. \code{profile_direction}
to \code{profileDirection}, although the \code{\link{[[,glider-method}}
mechanism works with either name, e.g. if \code{g} is a glider object, then
\code{g[["profileDirection"]]} and
\code{g[["profile_direction"]]} give the same result.
}
\examples{
\dontrun{
library(oceanglider)

# NOTE: these files are of order 100Meg, so they are
# not provided with the package as samples. In both
# examples, we plot a map and then an incidence-TS plot.

# Seaexplorer data, from DFO (January 2019)
g <- read.glider.netcdf("~/Dropbox/glider_dfo.nc")
# Remove spurious times, from a year before deployment
g <- subset(g, time > as.POSIXct("2018-01-01"))
# Remove any observation with bad salinity
g <- subset(g, is.finite(g[["salinity"]]))
plotGlider(g, which="map")
ctd <- as.ctd(g[["salinity"]], g[["temperature"]], g[["pressure"]],
              longitude=g[["longitude"]], latitude=g[["latitude"]])
plotTS(ctd, useSmoothScatter=TRUE)

# Slocum data,from Dalhousie CEOTR rdapp (April 2019)
g <- read.glider.netcdf("~/Dropbox/glider_erdapp.nc")
# Remove any observation with bad salinity
g <- subset(g, is.finite(g[["salinity"]]))
plotGlider(g, which="map")
ctd <- as.ctd(g[["salinity"]], g[["temperature"]], g[["pressure"]],
              latitude=g[["latitude"]], longitude=g[["longitude"]])
plotTS(ctd, useSmoothScatter=TRUE)
}

}
\seealso{
Other functions to read glider data: 
\code{\link{read.glider.netcdf.ioos}()},
\code{\link{read.glider.seaexplorer.delayed}()},
\code{\link{read.glider.seaexplorer.realtime}()},
\code{\link{read.glider.slocum}()}
}
\author{
Dan Kelley
}
\concept{functions to read glider data}
